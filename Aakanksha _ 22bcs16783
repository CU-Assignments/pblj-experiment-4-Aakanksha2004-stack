// Questin 2(4.2)
import java.util.concurrent.locks.ReentrantLock;

class TicketBookingSystem {
    private static final int TOTAL_SEATS = 10;
    private boolean[] seats = new boolean[TOTAL_SEATS];
    private ReentrantLock lock = new ReentrantLock();

    public void bookSeat(int seatNumber, String customerName) {
        lock.lock();
        try {
            if (seatNumber < 0 || seatNumber >= TOTAL_SEATS) {
                System.out.println(customerName + " - Invalid seat number!");
                return;
            }
            if (!seats[seatNumber]) {
                seats[seatNumber] = true;
                System.out.println(customerName + " successfully booked seat " + seatNumber);
            } else {
                System.out.println(customerName + " - Seat " + seatNumber + " is already booked.");
            }
        } finally {
            lock.unlock();
        }
    }
}

class BookingThread extends Thread {
    private TicketBookingSystem system;
    private int seatNumber;
    private String customerName;

    public BookingThread(TicketBookingSystem system, int seatNumber, String customerName, int priority) {
        this.system = system;
        this.seatNumber = seatNumber;
        this.customerName = customerName;
        setPriority(priority);
    }

    @Override
    public void run() {
        system.bookSeat(seatNumber, customerName);
    }
}

public class TicketBookingApp {
    public static void main(String[] args) {
        TicketBookingSystem system = new TicketBookingSystem();

        // Creating multiple booking threads with different priorities
        Thread vip1 = new BookingThread(system, 2, "VIP_John", Thread.MAX_PRIORITY);
        Thread vip2 = new BookingThread(system, 3, "VIP_Alice", Thread.MAX_PRIORITY);
        Thread user1 = new BookingThread(system, 2, "User_Mike", Thread.NORM_PRIORITY);
        Thread user2 = new BookingThread(system, 3, "User_Emma", Thread.NORM_PRIORITY);
        Thread user3 = new BookingThread(system, 4, "User_Sam", Thread.MIN_PRIORITY);

        // Start threads (VIPs are expected to execute first)
        vip1.start();
        vip2.start();
        user1.start();
        user2.start();
        user3.start();
    }
}
